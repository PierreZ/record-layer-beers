/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package fr.pierrezemb.record.layer.beers;

import beers.BeersProto;
import com.apple.foundationdb.record.provider.foundationdb.FDBDatabase;
import com.apple.foundationdb.record.provider.foundationdb.FDBDatabaseFactory;
import com.apple.foundationdb.record.provider.foundationdb.FDBRecordStore;
import com.apple.foundationdb.record.query.RecordQuery;
import com.apple.foundationdb.record.query.expressions.Query;
import org.junit.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.List;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;

import static org.junit.Assert.assertEquals;

public class BeersTest extends AbstractFDBContainer {
  private static final Logger LOGGER = LoggerFactory.getLogger(BeersTest.class);

  @Test
  public void testSomeBeers() throws ExecutionException, InterruptedException, TimeoutException {

    LOGGER.info("connecting to FDB...");
    // connect to FDB
    FDBDatabase db = FDBDatabaseFactory.instance().getDatabase(container.getClusterFile().getAbsolutePath());
    db.performNoOpAsync().get(2, TimeUnit.SECONDS);
    LOGGER.info("connected to {}", db.getClusterFile());

    BeerRecordLayer recordLayer = new BeerRecordLayer();

    // create a beer
    BeersProto.Beer beer = BeersProto.Beer.newBuilder()
      .setId("tripel-karmeliet")
      .setName("Tripel Karmeliet")
      .setCategory(BeersProto.BeerCategory.TRIPEL)
      .setAbv(8.4F).build();

    // save a beer
    db.run(context -> {
      LOGGER.trace("started a transaction at readVersion: {}", context.getReadVersion());
      // create FDBRecordStore
      FDBRecordStore fdbRecordStore = recordLayer.createFDBRecordStore(context, "beer-store-1");

      // and save the record
      fdbRecordStore.saveRecord(beer);
      return null;
    });

    LOGGER.info("successfully stored a beer");

    // retrieve a beer
    List<BeersProto.Beer> beers = db.run(context -> {
      // create FDBRecordStore
      FDBRecordStore fdbRecordStore = recordLayer.createFDBRecordStore(context, "beer-store-1");

      // create a query
      RecordQuery query = RecordQuery.newBuilder()
        .setRecordType("Beer")
        .setFilter(Query.field("abv").greaterThan(8.0F))
        .build();

      return fdbRecordStore
        .executeQuery(query)
        .map(queriedRecord -> BeersProto.Beer.newBuilder().mergeFrom(queriedRecord.getRecord()).build())
        .asList().join();
    });

    assertEquals(beers.size(), 1);

    LOGGER.info("found some beers: {}", beers);
  }
}
